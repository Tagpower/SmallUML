/*
 * generated by Xtext 2.10.0
 */
package org.xtext.smalluml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmallUMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class PackageElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Package");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPackageAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPackageKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cElementsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cElementsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cElementsSuperTypeParserRuleCall_4_2_0 = (RuleCall)cElementsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAssociationsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAssociationAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAssociationAssociationParserRuleCall_5_2_0 = (RuleCall)cAssociationAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cAssociationAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cAssociationAssociationParserRuleCall_5_3_1_0 = (RuleCall)cAssociationAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Package:
		//	{Package}
		//	'package'
		//	name=ID
		//	'{' ('elements' '{' elements+=SuperType* '}')? ('associations' '{' association+=Association (","
		//	association+=Association)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Package} 'package' name=ID '{' ('elements' '{' elements+=SuperType* '}')? ('associations' '{' association+=Association
		//("," association+=Association)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Package}
		public Action getPackageAction_0() { return cPackageAction_0; }
		
		//'package'
		public Keyword getPackageKeyword_1() { return cPackageKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('elements' '{' elements+=SuperType* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'elements'
		public Keyword getElementsKeyword_4_0() { return cElementsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//elements+=SuperType*
		public Assignment getElementsAssignment_4_2() { return cElementsAssignment_4_2; }
		
		//SuperType
		public RuleCall getElementsSuperTypeParserRuleCall_4_2_0() { return cElementsSuperTypeParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//('associations' '{' association+=Association ("," association+=Association)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'associations'
		public Keyword getAssociationsKeyword_5_0() { return cAssociationsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//association+=Association
		public Assignment getAssociationAssignment_5_2() { return cAssociationAssignment_5_2; }
		
		//Association
		public RuleCall getAssociationAssociationParserRuleCall_5_2_0() { return cAssociationAssociationParserRuleCall_5_2_0; }
		
		//("," association+=Association)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//association+=Association
		public Assignment getAssociationAssignment_5_3_1() { return cAssociationAssignment_5_3_1; }
		
		//Association
		public RuleCall getAssociationAssociationParserRuleCall_5_3_1_0() { return cAssociationAssociationParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SuperTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.SuperType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cEnumerationParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//SuperType:
		//	Class | Type | Enumeration;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | Type | Enumeration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//Type
		public RuleCall getTypeParserRuleCall_1() { return cTypeParserRuleCall_1; }
		
		//Enumeration
		public RuleCall getEnumerationParserRuleCall_2() { return cEnumerationParserRuleCall_2; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRolesKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRoleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRoleRoleParserRuleCall_5_0 = (RuleCall)cRoleAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRoleAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRoleRoleParserRuleCall_6_1_0 = (RuleCall)cRoleAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Association:
		//	'association'
		//	name=ID
		//	'{'
		//	'roles' '{' role+=Role ("," role+=Role)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'association' name=ID '{' 'roles' '{' role+=Role ("," role+=Role)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'association'
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'roles'
		public Keyword getRolesKeyword_3() { return cRolesKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//role+=Role
		public Assignment getRoleAssignment_5() { return cRoleAssignment_5; }
		
		//Role
		public RuleCall getRoleRoleParserRuleCall_5_0() { return cRoleRoleParserRuleCall_5_0; }
		
		//("," role+=Role)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//role+=Role
		public Assignment getRoleAssignment_6_1() { return cRoleAssignment_6_1; }
		
		//Role
		public RuleCall getRoleRoleParserRuleCall_6_1_0() { return cRoleRoleParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cExtendsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSuperAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cSuperClassCrossReference_3_1_0 = (CrossReference)cSuperAssignment_3_1.eContents().get(0);
		private final RuleCall cSuperClassEStringParserRuleCall_3_1_0_1 = (RuleCall)cSuperClassCrossReference_3_1_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAttributesKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAttributeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAttributeAttributeParserRuleCall_5_2_0 = (RuleCall)cAttributeAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cAttributeAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_5_3_1_0 = (RuleCall)cAttributeAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOperationsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOperationAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOperationOperationParserRuleCall_6_2_0 = (RuleCall)cOperationAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cOperationAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_6_3_1_0 = (RuleCall)cOperationAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	isAbstract?='abstract'?
		//	'class'
		//	name=ID ('extends' super=[Class|EString])?
		//	'{' ('attributes' '{' attribute+=Attribute ("," attribute+=Attribute)* '}')? ('operations' '{' operation+=Operation
		//	("," operation+=Operation)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'class' name=ID ('extends' super=[Class|EString])? '{' ('attributes' '{' attribute+=Attribute
		//("," attribute+=Attribute)* '}')? ('operations' '{' operation+=Operation ("," operation+=Operation)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//('extends' super=[Class|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'extends'
		public Keyword getExtendsKeyword_3_0() { return cExtendsKeyword_3_0; }
		
		//super=[Class|EString]
		public Assignment getSuperAssignment_3_1() { return cSuperAssignment_3_1; }
		
		//[Class|EString]
		public CrossReference getSuperClassCrossReference_3_1_0() { return cSuperClassCrossReference_3_1_0; }
		
		//EString
		public RuleCall getSuperClassEStringParserRuleCall_3_1_0_1() { return cSuperClassEStringParserRuleCall_3_1_0_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//('attributes' '{' attribute+=Attribute ("," attribute+=Attribute)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'attributes'
		public Keyword getAttributesKeyword_5_0() { return cAttributesKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//attribute+=Attribute
		public Assignment getAttributeAssignment_5_2() { return cAttributeAssignment_5_2; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_5_2_0() { return cAttributeAttributeParserRuleCall_5_2_0; }
		
		//("," attribute+=Attribute)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//attribute+=Attribute
		public Assignment getAttributeAssignment_5_3_1() { return cAttributeAssignment_5_3_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_5_3_1_0() { return cAttributeAttributeParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('operations' '{' operation+=Operation ("," operation+=Operation)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'operations'
		public Keyword getOperationsKeyword_6_0() { return cOperationsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//operation+=Operation
		public Assignment getOperationAssignment_6_2() { return cOperationAssignment_6_2; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_6_2_0() { return cOperationOperationParserRuleCall_6_2_0; }
		
		//("," operation+=Operation)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//operation+=Operation
		public Assignment getOperationAssignment_6_3_1() { return cOperationAssignment_6_3_1; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_6_3_1_0() { return cOperationOperationParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class TypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Type");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cTypeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cSemicolonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Type:
		//	{Type}
		//	'type'
		//	name=ID
		//	';';
		@Override public ParserRule getRule() { return rule; }
		
		//{Type} 'type' name=ID ';'
		public Group getGroup() { return cGroup; }
		
		//{Type}
		public Action getTypeAction_0() { return cTypeAction_0; }
		
		//'type'
		public Keyword getTypeKeyword_1() { return cTypeKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//';'
		public Keyword getSemicolonKeyword_3() { return cSemicolonKeyword_3; }
	}
	public class EnumerationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Enumeration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEnumerationAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cEnumerationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cEnumerationAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cEnumerationEStringParserRuleCall_4_0_0 = (RuleCall)cEnumerationAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cEnumerationAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cEnumerationEStringParserRuleCall_4_1_1_0 = (RuleCall)cEnumerationAssignment_4_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Enumeration:
		//	{Enumeration}
		//	'enumeration'
		//	name=ID
		//	'{' (enumeration+=EString ("," enumeration+=EString)*)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Enumeration} 'enumeration' name=ID '{' (enumeration+=EString ("," enumeration+=EString)*)? '}'
		public Group getGroup() { return cGroup; }
		
		//{Enumeration}
		public Action getEnumerationAction_0() { return cEnumerationAction_0; }
		
		//'enumeration'
		public Keyword getEnumerationKeyword_1() { return cEnumerationKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(enumeration+=EString ("," enumeration+=EString)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//enumeration+=EString
		public Assignment getEnumerationAssignment_4_0() { return cEnumerationAssignment_4_0; }
		
		//EString
		public RuleCall getEnumerationEStringParserRuleCall_4_0_0() { return cEnumerationEStringParserRuleCall_4_0_0; }
		
		//("," enumeration+=EString)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//enumeration+=EString
		public Assignment getEnumerationAssignment_4_1_1() { return cEnumerationAssignment_4_1_1; }
		
		//EString
		public RuleCall getEnumerationEStringParserRuleCall_4_1_1_0() { return cEnumerationEStringParserRuleCall_4_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeSuperTypeCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeSuperTypeEStringParserRuleCall_3_0_1 = (RuleCall)cTypeSuperTypeCrossReference_3_0.eContents().get(1);
		
		//Attribute:
		//	'attribute'
		//	name=EString
		//	':' type=[SuperType|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'attribute' name=EString ':' type=[SuperType|EString]
		public Group getGroup() { return cGroup; }
		
		//'attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//type=[SuperType|EString]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//[SuperType|EString]
		public CrossReference getTypeSuperTypeCrossReference_3_0() { return cTypeSuperTypeCrossReference_3_0; }
		
		//EString
		public RuleCall getTypeSuperTypeEStringParserRuleCall_3_0_1() { return cTypeSuperTypeEStringParserRuleCall_3_0_1; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cReturnsKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cReturnTypeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cReturnTypeSuperTypeCrossReference_3_1_0 = (CrossReference)cReturnTypeAssignment_3_1.eContents().get(0);
		private final RuleCall cReturnTypeSuperTypeEStringParserRuleCall_3_1_0_1 = (RuleCall)cReturnTypeSuperTypeCrossReference_3_1_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParametersAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_1_0 = (RuleCall)cParametersAssignment_4_1.eContents().get(0);
		private final Group cGroup_4_2 = (Group)cGroup_4.eContents().get(2);
		private final Keyword cCommaKeyword_4_2_0 = (Keyword)cGroup_4_2.eContents().get(0);
		private final Assignment cParametersAssignment_4_2_1 = (Assignment)cGroup_4_2.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_4_2_1_0 = (RuleCall)cParametersAssignment_4_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//Operation:
		//	isAbstract?='abstract'?
		//	'operation'
		//	name=EString ('returns' returnType=[SuperType|EString])? ('{' parameters+=Parameter (',' parameters+=Parameter)*
		//	'}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='abstract'? 'operation' name=EString ('returns' returnType=[SuperType|EString])? ('{' parameters+=Parameter
		//(',' parameters+=Parameter)* '}')?
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='abstract'?
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'abstract'
		public Keyword getIsAbstractAbstractKeyword_0_0() { return cIsAbstractAbstractKeyword_0_0; }
		
		//'operation'
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('returns' returnType=[SuperType|EString])?
		public Group getGroup_3() { return cGroup_3; }
		
		//'returns'
		public Keyword getReturnsKeyword_3_0() { return cReturnsKeyword_3_0; }
		
		//returnType=[SuperType|EString]
		public Assignment getReturnTypeAssignment_3_1() { return cReturnTypeAssignment_3_1; }
		
		//[SuperType|EString]
		public CrossReference getReturnTypeSuperTypeCrossReference_3_1_0() { return cReturnTypeSuperTypeCrossReference_3_1_0; }
		
		//EString
		public RuleCall getReturnTypeSuperTypeEStringParserRuleCall_3_1_0_1() { return cReturnTypeSuperTypeEStringParserRuleCall_3_1_0_1; }
		
		//('{' parameters+=Parameter (',' parameters+=Parameter)* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_1() { return cParametersAssignment_4_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_1_0() { return cParametersParameterParserRuleCall_4_1_0; }
		
		//(',' parameters+=Parameter)*
		public Group getGroup_4_2() { return cGroup_4_2; }
		
		//','
		public Keyword getCommaKeyword_4_2_0() { return cCommaKeyword_4_2_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_4_2_1() { return cParametersAssignment_4_2_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_4_2_1_0() { return cParametersParameterParserRuleCall_4_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameEStringParserRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeSuperTypeCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeSuperTypeEStringParserRuleCall_2_0_1 = (RuleCall)cTypeSuperTypeCrossReference_2_0.eContents().get(1);
		
		//Parameter:
		//	name=EString
		//	':'
		//	type=[SuperType|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//name=EString ':' type=[SuperType|EString]
		public Group getGroup() { return cGroup; }
		
		//name=EString
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_0_0() { return cNameEStringParserRuleCall_0_0; }
		
		//':'
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }
		
		//type=[SuperType|EString]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }
		
		//[SuperType|EString]
		public CrossReference getTypeSuperTypeCrossReference_2_0() { return cTypeSuperTypeCrossReference_2_0; }
		
		//EString
		public RuleCall getTypeSuperTypeEStringParserRuleCall_2_0_1() { return cTypeSuperTypeEStringParserRuleCall_2_0_1; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLowerBoundAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLowerBoundEIntParserRuleCall_3_0 = (RuleCall)cLowerBoundAssignment_3.eContents().get(0);
		private final Keyword cCommaKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cUpperBoundAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cUpperBoundEIntParserRuleCall_5_0 = (RuleCall)cUpperBoundAssignment_5.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cWithKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cClassAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cClassClassCrossReference_8_0 = (CrossReference)cClassAssignment_8.eContents().get(0);
		private final RuleCall cClassClassEStringParserRuleCall_8_0_1 = (RuleCall)cClassClassCrossReference_8_0.eContents().get(1);
		
		//Role:
		//	'role'
		//	name=EString
		//	'[' lowerBound=EInt ',' upperBound=EInt ']'
		//	'with' class=[Class|EString];
		@Override public ParserRule getRule() { return rule; }
		
		//'role' name=EString '[' lowerBound=EInt ',' upperBound=EInt ']' 'with' class=[Class|EString]
		public Group getGroup() { return cGroup; }
		
		//'role'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_2() { return cLeftSquareBracketKeyword_2; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_3() { return cLowerBoundAssignment_3; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_3_0() { return cLowerBoundEIntParserRuleCall_3_0; }
		
		//','
		public Keyword getCommaKeyword_4() { return cCommaKeyword_4; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_5() { return cUpperBoundAssignment_5; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_5_0() { return cUpperBoundEIntParserRuleCall_5_0; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6() { return cRightSquareBracketKeyword_6; }
		
		//'with'
		public Keyword getWithKeyword_7() { return cWithKeyword_7; }
		
		//class=[Class|EString]
		public Assignment getClassAssignment_8() { return cClassAssignment_8; }
		
		//[Class|EString]
		public CrossReference getClassClassCrossReference_8_0() { return cClassClassCrossReference_8_0; }
		
		//EString
		public RuleCall getClassClassEStringParserRuleCall_8_0_1() { return cClassClassEStringParserRuleCall_8_0_1; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.smalluml.SmallUML.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	
	private final PackageElements pPackage;
	private final SuperTypeElements pSuperType;
	private final AssociationElements pAssociation;
	private final ClassElements pClass;
	private final TypeElements pType;
	private final EnumerationElements pEnumeration;
	private final AttributeElements pAttribute;
	private final OperationElements pOperation;
	private final ParameterElements pParameter;
	private final RoleElements pRole;
	private final EStringElements pEString;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallUMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pPackage = new PackageElements();
		this.pSuperType = new SuperTypeElements();
		this.pAssociation = new AssociationElements();
		this.pClass = new ClassElements();
		this.pType = new TypeElements();
		this.pEnumeration = new EnumerationElements();
		this.pAttribute = new AttributeElements();
		this.pOperation = new OperationElements();
		this.pParameter = new ParameterElements();
		this.pRole = new RoleElements();
		this.pEString = new EStringElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.smalluml.SmallUML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Package:
	//	{Package}
	//	'package'
	//	name=ID
	//	'{' ('elements' '{' elements+=SuperType* '}')? ('associations' '{' association+=Association (","
	//	association+=Association)* '}')?
	//	'}';
	public PackageElements getPackageAccess() {
		return pPackage;
	}
	
	public ParserRule getPackageRule() {
		return getPackageAccess().getRule();
	}
	
	//SuperType:
	//	Class | Type | Enumeration;
	public SuperTypeElements getSuperTypeAccess() {
		return pSuperType;
	}
	
	public ParserRule getSuperTypeRule() {
		return getSuperTypeAccess().getRule();
	}
	
	//Association:
	//	'association'
	//	name=ID
	//	'{'
	//	'roles' '{' role+=Role ("," role+=Role)* '}'
	//	'}';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Class:
	//	isAbstract?='abstract'?
	//	'class'
	//	name=ID ('extends' super=[Class|EString])?
	//	'{' ('attributes' '{' attribute+=Attribute ("," attribute+=Attribute)* '}')? ('operations' '{' operation+=Operation
	//	("," operation+=Operation)* '}')?
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Type:
	//	{Type}
	//	'type'
	//	name=ID
	//	';';
	public TypeElements getTypeAccess() {
		return pType;
	}
	
	public ParserRule getTypeRule() {
		return getTypeAccess().getRule();
	}
	
	//Enumeration:
	//	{Enumeration}
	//	'enumeration'
	//	name=ID
	//	'{' (enumeration+=EString ("," enumeration+=EString)*)?
	//	'}';
	public EnumerationElements getEnumerationAccess() {
		return pEnumeration;
	}
	
	public ParserRule getEnumerationRule() {
		return getEnumerationAccess().getRule();
	}
	
	//Attribute:
	//	'attribute'
	//	name=EString
	//	':' type=[SuperType|EString];
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Operation:
	//	isAbstract?='abstract'?
	//	'operation'
	//	name=EString ('returns' returnType=[SuperType|EString])? ('{' parameters+=Parameter (',' parameters+=Parameter)*
	//	'}')?;
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Parameter:
	//	name=EString
	//	':'
	//	type=[SuperType|EString];
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Role:
	//	'role'
	//	name=EString
	//	'[' lowerBound=EInt ',' upperBound=EInt ']'
	//	'with' class=[Class|EString];
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
