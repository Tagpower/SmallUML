/*
 * generated by Xtext 2.10.0
 */
package org.smalluml.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SmallUMLGrammarAccess extends AbstractGrammarElementFinder {
	
	public class SuperTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.SuperType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cClassParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cString0ParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cDateParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//SuperType:
		//	Class | Integer | String0 | Date;
		@Override public ParserRule getRule() { return rule; }
		
		//Class | Integer | String0 | Date
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Class
		public RuleCall getClassParserRuleCall_0() { return cClassParserRuleCall_0; }
		
		//Integer
		public RuleCall getIntegerParserRuleCall_1() { return cIntegerParserRuleCall_1; }
		
		//String0
		public RuleCall getString0ParserRuleCall_2() { return cString0ParserRuleCall_2; }
		
		//Date
		public RuleCall getDateParserRuleCall_3() { return cDateParserRuleCall_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class AttributeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Attribute");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAttributeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeSuperTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeSuperTypeEStringParserRuleCall_4_0_1 = (RuleCall)cTypeSuperTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Attribute:
		//	'Attribute'
		//	name=EString
		//	'{'
		//	'type' type=[SuperType|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Attribute' name=EString '{' 'type' type=[SuperType|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'Attribute'
		public Keyword getAttributeKeyword_0() { return cAttributeKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[SuperType|EString]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SuperType|EString]
		public CrossReference getTypeSuperTypeCrossReference_4_0() { return cTypeSuperTypeCrossReference_4_0; }
		
		//EString
		public RuleCall getTypeSuperTypeEStringParserRuleCall_4_0_1() { return cTypeSuperTypeEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class RoleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Role");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRoleKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLowerBoundKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cLowerBoundAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cLowerBoundEIntParserRuleCall_4_0 = (RuleCall)cLowerBoundAssignment_4.eContents().get(0);
		private final Keyword cUpperBoundKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cUpperBoundAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cUpperBoundEIntParserRuleCall_6_0 = (RuleCall)cUpperBoundAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Role:
		//	'Role'
		//	name=EString
		//	'{'
		//	'lowerBound' lowerBound=EInt
		//	'upperBound' upperBound=EInt
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Role' name=EString '{' 'lowerBound' lowerBound=EInt 'upperBound' upperBound=EInt '}'
		public Group getGroup() { return cGroup; }
		
		//'Role'
		public Keyword getRoleKeyword_0() { return cRoleKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'lowerBound'
		public Keyword getLowerBoundKeyword_3() { return cLowerBoundKeyword_3; }
		
		//lowerBound=EInt
		public Assignment getLowerBoundAssignment_4() { return cLowerBoundAssignment_4; }
		
		//EInt
		public RuleCall getLowerBoundEIntParserRuleCall_4_0() { return cLowerBoundEIntParserRuleCall_4_0; }
		
		//'upperBound'
		public Keyword getUpperBoundKeyword_5() { return cUpperBoundKeyword_5; }
		
		//upperBound=EInt
		public Assignment getUpperBoundAssignment_6() { return cUpperBoundAssignment_6; }
		
		//EInt
		public RuleCall getUpperBoundEIntParserRuleCall_6_0() { return cUpperBoundEIntParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AssociationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Association");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAssociationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRoleKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRoleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRoleRoleParserRuleCall_5_0 = (RuleCall)cRoleAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cRoleAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cRoleRoleParserRuleCall_6_1_0 = (RuleCall)cRoleAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Association:
		//	'Association'
		//	name=EString
		//	'{'
		//	'role' '{' role+=Role ("," role+=Role)* '}'
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Association' name=EString '{' 'role' '{' role+=Role ("," role+=Role)* '}' '}'
		public Group getGroup() { return cGroup; }
		
		//'Association'
		public Keyword getAssociationKeyword_0() { return cAssociationKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'role'
		public Keyword getRoleKeyword_3() { return cRoleKeyword_3; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }
		
		//role+=Role
		public Assignment getRoleAssignment_5() { return cRoleAssignment_5; }
		
		//Role
		public RuleCall getRoleRoleParserRuleCall_5_0() { return cRoleRoleParserRuleCall_5_0; }
		
		//("," role+=Role)*
		public Group getGroup_6() { return cGroup_6; }
		
		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }
		
		//role+=Role
		public Assignment getRoleAssignment_6_1() { return cRoleAssignment_6_1; }
		
		//Role
		public RuleCall getRoleRoleParserRuleCall_6_1_0() { return cRoleRoleParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class OperationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Operation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractIsAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cOperationKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cReturnTypeKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cReturnTypeSuperTypeCrossReference_4_1_0 = (CrossReference)cReturnTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cReturnTypeSuperTypeEStringParserRuleCall_4_1_0_1 = (RuleCall)cReturnTypeSuperTypeCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cParametersKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cParametersAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cParametersParameterParserRuleCall_5_2_0 = (RuleCall)cParametersAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cParametersAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cParametersParameterParserRuleCall_5_3_1_0 = (RuleCall)cParametersAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Operation:
		//	isAbstract?='isAbstract'
		//	'Operation'
		//	name=EString
		//	'{' ('returnType' returnType=[SuperType|EString])? ('parameters' '{' parameters+=Parameter (","
		//	parameters+=Parameter)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='isAbstract' 'Operation' name=EString '{' ('returnType' returnType=[SuperType|EString])? ('parameters' '{'
		//parameters+=Parameter ("," parameters+=Parameter)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='isAbstract'
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'isAbstract'
		public Keyword getIsAbstractIsAbstractKeyword_0_0() { return cIsAbstractIsAbstractKeyword_0_0; }
		
		//'Operation'
		public Keyword getOperationKeyword_1() { return cOperationKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('returnType' returnType=[SuperType|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'returnType'
		public Keyword getReturnTypeKeyword_4_0() { return cReturnTypeKeyword_4_0; }
		
		//returnType=[SuperType|EString]
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }
		
		//[SuperType|EString]
		public CrossReference getReturnTypeSuperTypeCrossReference_4_1_0() { return cReturnTypeSuperTypeCrossReference_4_1_0; }
		
		//EString
		public RuleCall getReturnTypeSuperTypeEStringParserRuleCall_4_1_0_1() { return cReturnTypeSuperTypeEStringParserRuleCall_4_1_0_1; }
		
		//('parameters' '{' parameters+=Parameter ("," parameters+=Parameter)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'parameters'
		public Keyword getParametersKeyword_5_0() { return cParametersKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_5_2() { return cParametersAssignment_5_2; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_2_0() { return cParametersParameterParserRuleCall_5_2_0; }
		
		//("," parameters+=Parameter)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//parameters+=Parameter
		public Assignment getParametersAssignment_5_3_1() { return cParametersAssignment_5_3_1; }
		
		//Parameter
		public RuleCall getParametersParameterParserRuleCall_5_3_1_0() { return cParametersParameterParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cParameterKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cTypeSuperTypeCrossReference_4_0 = (CrossReference)cTypeAssignment_4.eContents().get(0);
		private final RuleCall cTypeSuperTypeEStringParserRuleCall_4_0_1 = (RuleCall)cTypeSuperTypeCrossReference_4_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Parameter:
		//	'Parameter'
		//	name=EString
		//	'{'
		//	'type' type=[SuperType|EString]
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Parameter' name=EString '{' 'type' type=[SuperType|EString] '}'
		public Group getGroup() { return cGroup; }
		
		//'Parameter'
		public Keyword getParameterKeyword_0() { return cParameterKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//type=[SuperType|EString]
		public Assignment getTypeAssignment_4() { return cTypeAssignment_4; }
		
		//[SuperType|EString]
		public CrossReference getTypeSuperTypeCrossReference_4_0() { return cTypeSuperTypeCrossReference_4_0; }
		
		//EString
		public RuleCall getTypeSuperTypeEStringParserRuleCall_4_0_1() { return cTypeSuperTypeEStringParserRuleCall_4_0_1; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIsAbstractAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cIsAbstractIsAbstractKeyword_0_0 = (Keyword)cIsAbstractAssignment_0.eContents().get(0);
		private final Keyword cClassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSuperKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSuperAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cSuperInheritanceCrossReference_4_1_0 = (CrossReference)cSuperAssignment_4_1.eContents().get(0);
		private final RuleCall cSuperInheritanceEStringParserRuleCall_4_1_0_1 = (RuleCall)cSuperInheritanceCrossReference_4_1_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cAttributeKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cAttributeAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cAttributeAttributeParserRuleCall_5_2_0 = (RuleCall)cAttributeAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cAttributeAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cAttributeAttributeParserRuleCall_5_3_1_0 = (RuleCall)cAttributeAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cOperationKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cOperationAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cOperationOperationParserRuleCall_6_2_0 = (RuleCall)cOperationAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cOperationAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cOperationOperationParserRuleCall_6_3_1_0 = (RuleCall)cOperationAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Class:
		//	isAbstract?='isAbstract'
		//	'Class'
		//	name=EString
		//	'{' ('super' super=[Inheritance|EString])? ('attribute' '{' attribute+=Attribute ("," attribute+=Attribute)* '}')?
		//	('operation' '{' operation+=Operation ("," operation+=Operation)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//isAbstract?='isAbstract' 'Class' name=EString '{' ('super' super=[Inheritance|EString])? ('attribute' '{'
		//attribute+=Attribute ("," attribute+=Attribute)* '}')? ('operation' '{' operation+=Operation (","
		//operation+=Operation)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//isAbstract?='isAbstract'
		public Assignment getIsAbstractAssignment_0() { return cIsAbstractAssignment_0; }
		
		//'isAbstract'
		public Keyword getIsAbstractIsAbstractKeyword_0_0() { return cIsAbstractIsAbstractKeyword_0_0; }
		
		//'Class'
		public Keyword getClassKeyword_1() { return cClassKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//('super' super=[Inheritance|EString])?
		public Group getGroup_4() { return cGroup_4; }
		
		//'super'
		public Keyword getSuperKeyword_4_0() { return cSuperKeyword_4_0; }
		
		//super=[Inheritance|EString]
		public Assignment getSuperAssignment_4_1() { return cSuperAssignment_4_1; }
		
		//[Inheritance|EString]
		public CrossReference getSuperInheritanceCrossReference_4_1_0() { return cSuperInheritanceCrossReference_4_1_0; }
		
		//EString
		public RuleCall getSuperInheritanceEStringParserRuleCall_4_1_0_1() { return cSuperInheritanceEStringParserRuleCall_4_1_0_1; }
		
		//('attribute' '{' attribute+=Attribute ("," attribute+=Attribute)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'attribute'
		public Keyword getAttributeKeyword_5_0() { return cAttributeKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//attribute+=Attribute
		public Assignment getAttributeAssignment_5_2() { return cAttributeAssignment_5_2; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_5_2_0() { return cAttributeAttributeParserRuleCall_5_2_0; }
		
		//("," attribute+=Attribute)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//attribute+=Attribute
		public Assignment getAttributeAssignment_5_3_1() { return cAttributeAssignment_5_3_1; }
		
		//Attribute
		public RuleCall getAttributeAttributeParserRuleCall_5_3_1_0() { return cAttributeAttributeParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('operation' '{' operation+=Operation ("," operation+=Operation)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'operation'
		public Keyword getOperationKeyword_6_0() { return cOperationKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//operation+=Operation
		public Assignment getOperationAssignment_6_2() { return cOperationAssignment_6_2; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_6_2_0() { return cOperationOperationParserRuleCall_6_2_0; }
		
		//("," operation+=Operation)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//operation+=Operation
		public Assignment getOperationAssignment_6_3_1() { return cOperationAssignment_6_3_1; }
		
		//Operation
		public RuleCall getOperationOperationParserRuleCall_6_3_1_0() { return cOperationOperationParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class IntegerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Integer");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntegerKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Integer:
		//	{Integer}
		//	'Integer'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Integer} 'Integer' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Integer}
		public Action getIntegerAction_0() { return cIntegerAction_0; }
		
		//'Integer'
		public Keyword getIntegerKeyword_1() { return cIntegerKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class String0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.String0");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//String0 String:
		//	{String}
		//	'String'
		//	name=EString
		@Override public ParserRule getRule() { return rule; }
		
		//{String} 'String' name=EString
		public Group getGroup() { return cGroup; }
		
		//{String}
		public Action getStringAction_0() { return cStringAction_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class DateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Date");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDateAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDateKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Date:
		//	{Date}
		//	'Date'
		//	name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Date} 'Date' name=EString
		public Group getGroup() { return cGroup; }
		
		//{Date}
		public Action getDateAction_0() { return cDateAction_0; }
		
		//'Date'
		public Keyword getDateKeyword_1() { return cDateKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class InheritanceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smalluml.SmallUML.Inheritance");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInheritanceAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInheritanceKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cChildrenKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cChildrenAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cChildrenClassParserRuleCall_3_2_0 = (RuleCall)cChildrenAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cChildrenAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cChildrenClassParserRuleCall_3_3_1_0 = (RuleCall)cChildrenAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Inheritance:
		//	{Inheritance}
		//	'Inheritance'
		//	'{' ('children' '{' children+=Class ("," children+=Class)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Inheritance} 'Inheritance' '{' ('children' '{' children+=Class ("," children+=Class)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Inheritance}
		public Action getInheritanceAction_0() { return cInheritanceAction_0; }
		
		//'Inheritance'
		public Keyword getInheritanceKeyword_1() { return cInheritanceKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('children' '{' children+=Class ("," children+=Class)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'children'
		public Keyword getChildrenKeyword_3_0() { return cChildrenKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//children+=Class
		public Assignment getChildrenAssignment_3_2() { return cChildrenAssignment_3_2; }
		
		//Class
		public RuleCall getChildrenClassParserRuleCall_3_2_0() { return cChildrenClassParserRuleCall_3_2_0; }
		
		//("," children+=Class)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//children+=Class
		public Assignment getChildrenAssignment_3_3_1() { return cChildrenAssignment_3_3_1; }
		
		//Class
		public RuleCall getChildrenClassParserRuleCall_3_3_1_0() { return cChildrenClassParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	
	
	private final SuperTypeElements pSuperType;
	private final EStringElements pEString;
	private final AttributeElements pAttribute;
	private final RoleElements pRole;
	private final AssociationElements pAssociation;
	private final OperationElements pOperation;
	private final ParameterElements pParameter;
	private final ClassElements pClass;
	private final IntegerElements pInteger;
	private final String0Elements pString0;
	private final DateElements pDate;
	private final EIntElements pEInt;
	private final EBooleanElements pEBoolean;
	private final InheritanceElements pInheritance;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SmallUMLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSuperType = new SuperTypeElements();
		this.pEString = new EStringElements();
		this.pAttribute = new AttributeElements();
		this.pRole = new RoleElements();
		this.pAssociation = new AssociationElements();
		this.pOperation = new OperationElements();
		this.pParameter = new ParameterElements();
		this.pClass = new ClassElements();
		this.pInteger = new IntegerElements();
		this.pString0 = new String0Elements();
		this.pDate = new DateElements();
		this.pEInt = new EIntElements();
		this.pEBoolean = new EBooleanElements();
		this.pInheritance = new InheritanceElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.smalluml.SmallUML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//SuperType:
	//	Class | Integer | String0 | Date;
	public SuperTypeElements getSuperTypeAccess() {
		return pSuperType;
	}
	
	public ParserRule getSuperTypeRule() {
		return getSuperTypeAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//Attribute:
	//	'Attribute'
	//	name=EString
	//	'{'
	//	'type' type=[SuperType|EString]
	//	'}';
	public AttributeElements getAttributeAccess() {
		return pAttribute;
	}
	
	public ParserRule getAttributeRule() {
		return getAttributeAccess().getRule();
	}
	
	//Role:
	//	'Role'
	//	name=EString
	//	'{'
	//	'lowerBound' lowerBound=EInt
	//	'upperBound' upperBound=EInt
	//	'}';
	public RoleElements getRoleAccess() {
		return pRole;
	}
	
	public ParserRule getRoleRule() {
		return getRoleAccess().getRule();
	}
	
	//Association:
	//	'Association'
	//	name=EString
	//	'{'
	//	'role' '{' role+=Role ("," role+=Role)* '}'
	//	'}';
	public AssociationElements getAssociationAccess() {
		return pAssociation;
	}
	
	public ParserRule getAssociationRule() {
		return getAssociationAccess().getRule();
	}
	
	//Operation:
	//	isAbstract?='isAbstract'
	//	'Operation'
	//	name=EString
	//	'{' ('returnType' returnType=[SuperType|EString])? ('parameters' '{' parameters+=Parameter (","
	//	parameters+=Parameter)* '}')?
	//	'}';
	public OperationElements getOperationAccess() {
		return pOperation;
	}
	
	public ParserRule getOperationRule() {
		return getOperationAccess().getRule();
	}
	
	//Parameter:
	//	'Parameter'
	//	name=EString
	//	'{'
	//	'type' type=[SuperType|EString]
	//	'}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Class:
	//	isAbstract?='isAbstract'
	//	'Class'
	//	name=EString
	//	'{' ('super' super=[Inheritance|EString])? ('attribute' '{' attribute+=Attribute ("," attribute+=Attribute)* '}')?
	//	('operation' '{' operation+=Operation ("," operation+=Operation)* '}')?
	//	'}';
	public ClassElements getClassAccess() {
		return pClass;
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}
	
	//Integer:
	//	{Integer}
	//	'Integer'
	//	name=EString;
	public IntegerElements getIntegerAccess() {
		return pInteger;
	}
	
	public ParserRule getIntegerRule() {
		return getIntegerAccess().getRule();
	}
	
	//String0 String:
	//	{String}
	//	'String'
	//	name=EString
	public String0Elements getString0Access() {
		return pString0;
	}
	
	public ParserRule getString0Rule() {
		return getString0Access().getRule();
	}
	
	//Date:
	//	{Date}
	//	'Date'
	//	name=EString;
	public DateElements getDateAccess() {
		return pDate;
	}
	
	public ParserRule getDateRule() {
		return getDateAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//Inheritance:
	//	{Inheritance}
	//	'Inheritance'
	//	'{' ('children' '{' children+=Class ("," children+=Class)* '}')?
	//	'}';
	public InheritanceElements getInheritanceAccess() {
		return pInheritance;
	}
	
	public ParserRule getInheritanceRule() {
		return getInheritanceAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
