-- @path MM=/SmallUML/model/smalluml.ecore
-- @path MM1=/UML/model/uml.ecore

module Small2UML;
create OUT : MM1 from IN : MM;

rule Package {
	from
		f : MM!Package
	to 
		t : MM1!Package (
			name <- f.name,
			packagedElement <- f.elements->union(f.association)
		)
}

rule Class {
	from
		f : MM!Class
	to 
		t : MM1!Class (
			name <- f.name,
			isAbstract <- f.isAbstract,
			superClass <- f.super,
			ownedAttribute <- f.attribute,
			ownedOperation <- f.operation			
		)
}

rule Type {
	from
		f : MM!Type
	to
		t : MM1!DataType (
			name <- f.name
		)
}
	

rule Enumeration {
	from
		f : MM!Enumeration
	to
		t : MM1!Enumeration (
			name <- f.name,
			ownedAttribute <- f.enumeration->collect(e | thisModule.EnumerationElement(e))
		)
}

lazy rule EnumerationElement {
	from
		f : String
	to
		t : MM1!Property (
			name <- f	
		)
}

rule Attribute {
	from
		f : MM!Attribute
	to
		t : MM1!Property (
			name <- f.name,
			type <- f.type
		)
}

rule Operation {
	from	
		f : MM!Operation
	to
		t : MM1!Operation (
			name <- f.name,
			type <- f.returnType,
			ownedParameter <- f.parameters,
			isAbstract <- f.isAbstract
		)
}

rule Parameter {
	from
		f : MM!Parameter
	to
		t : MM1!Parameter (
			name <- f.name,
			type <- f.type			
		)
}

rule Association {
	from
		f : MM!Association
	to
		t : MM1!Association (
			name <- f.name,
			memberEnd <- f.role->collect(r | thisModule.Role(r) )
		)
}

lazy rule Role {
	from
		f : MM!Role
	to
		t : MM1!Property (
			name <- f.name,
			type <- f.class,
			lowerValue <- thisModule.Cardinality(f.lowerBound),
			upperValue <- thisModule.Cardinality(f.upperBound)
		)
}

lazy rule Cardinality {
	from
		f : Integer
	to
		t : MM1!LiteralString (
			value <- f.toString()
		)
}
